//  Copyright 2013 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

package ast;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/katydid/validator-gogo-proto/relapse/types/types.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

//Grammar is the ast node representing the whole grammar.
message Grammar {
	optional Pattern TopPattern = 1;
	repeated PatternDecl PatternDecls = 2;
	optional Space After = 3;
}

//PatternDecl is the ast node for the declaration of a pattern.
message PatternDecl {
	optional Keyword Hash = 1;
	optional Space Before = 2;
	optional string Name = 3 [(gogoproto.nullable) = false];
	optional Keyword Eq = 4;
	optional Pattern Pattern = 5;
}

//Pattern is the ast node for the union of all possible patterns.
message Pattern {
	option (gogoproto.onlyone) = true;
	optional Empty Empty = 1;
	optional TreeNode TreeNode = 3;
	optional LeafNode LeafNode = 4;
	optional Concat Concat = 5;
	optional Or Or = 6;
	optional And And = 7;
	optional ZeroOrMore ZeroOrMore = 8;
	optional Reference Reference = 9;
	optional Not Not = 10;
	optional ZAny ZAny = 11;
	optional Contains Contains = 12;
	optional Optional Optional = 13;
	optional Interleave Interleave = 14;
}

//Empty is the ast node for the Empty pattern.
message Empty {
	optional Keyword Empty = 1;
}

//TreeNode is the ast node for the TreeNode pattern.
message TreeNode {
	optional NameExpr Name = 1;
	optional Keyword Colon = 2;
	optional Pattern Pattern = 3;
}

//Contains is the ast node for the Contains pattern.
message Contains {
	optional Keyword Dot = 1;
	optional Pattern Pattern = 2;
}

//LeafNode is the ast node for the LeafNode pattern.
message LeafNode {
	optional Expr Expr = 1;
}

//Concat is the ast node for the Concat pattern.
message Concat {
	optional Keyword OpenBracket = 2;
	optional Pattern LeftPattern = 3;
	optional Keyword Comma = 4;
	optional Pattern RightPattern = 5;
	optional Keyword ExtraComma = 6;
	optional Keyword CloseBracket = 7;
}

//Or is the ast node for the Or pattern.
message Or {
	optional Keyword OpenParen = 1;
	optional Pattern LeftPattern = 2;
	optional Keyword Pipe = 3;
	optional Pattern RightPattern = 4;
	optional Keyword CloseParen = 5;
}

//And is the ast node for the And pattern.
message And {
	optional Keyword OpenParen = 1;
	optional Pattern LeftPattern = 2;
	optional Keyword Ampersand = 3;
	optional Pattern RightPattern = 4;
	optional Keyword CloseParen = 5;
}

//ZeroOrMore is the ast node for the ZeroOrMore pattern.
message ZeroOrMore {
	optional Keyword OpenParen = 1;
	optional Pattern Pattern = 2;
	optional Keyword CloseParen = 3;
	optional Keyword Star = 4;
}

//Reference is the ast node for the Reference pattern.
message Reference {
	optional Keyword At = 1;
	optional string Name = 2 [(gogoproto.nullable) = false];
}

//Not is the ast node for the Not pattern.
message Not {
	optional Keyword Exclamation = 1;
	optional Keyword OpenParen = 2;
	optional Pattern Pattern = 3;
	optional Keyword CloseParen = 4;
}

//ZAny is the ast node for the ZAny pattern.
message ZAny {
	optional Keyword Star = 1;
}

//Optional is the ast node for the Optional pattern.
message Optional {
	optional Keyword OpenParen = 1;
	optional Pattern Pattern = 2;
	optional Keyword CloseParen = 3;
	optional Keyword QuestionMark = 4;
}

//Interleave is the ast node for the Interleave pattern.
message Interleave {
	optional Keyword OpenCurly = 2;
	optional Pattern LeftPattern = 3;
	optional Keyword SemiColon = 4;
	optional Pattern RightPattern = 5;
	optional Keyword ExtraSemiColon = 6;
	optional Keyword CloseCurly = 7;
}

//Expr is a union of all possible expression types, terminal, list, function and builtin function.
message Expr {
	optional Keyword RightArrow = 1;
	optional Keyword Comma = 2;
	optional Terminal Terminal = 3;
	optional List List = 4;
	optional Function Function = 5;
	optional BuiltIn BuiltIn = 6;
}

//List is an expression that represents a typed list of expressions.
message List {
	optional Space Before = 1;
	optional types.Type Type = 2 [(gogoproto.nullable) = false];
	optional Keyword OpenCurly = 3;
	repeated Expr Elems = 4;
	optional Keyword CloseCurly = 5;
}

//Function is an expression that represents a function expression, which contains a function name and a list parameters.
message Function {
	optional Space Before = 1;
	optional string Name = 2 [(gogoproto.nullable) = false];
	optional Keyword OpenParen = 3;
	repeated Expr Params = 4;
	optional Keyword CloseParen = 5;
}

//BuiltIn is an expression that represents a builtin function.  This is represented by a symbol and an expression.
message BuiltIn {
	optional Keyword Symbol = 1;
	optional Expr Expr = 2;
}

//Terminal is an expression that represents a literal value or variable.
message Terminal {
	optional Space Before = 1;
	optional string Literal = 2 [(gogoproto.nullable) = false];

	optional double DoubleValue = 3;
	optional int64 IntValue = 5;
	optional uint64 UintValue = 6;

	optional bool BoolValue = 8;
	optional string StringValue = 9;

	optional bytes BytesValue = 10;

	optional Variable Variable = 50;
}

//Variable is a terminal.
message Variable {
	optional types.Type Type = 2 [(gogoproto.nullable) = false];
}

//Keyword represents any possible keyword.
message Keyword {
	optional Space Before = 1;
	optional string Value = 2 [(gogoproto.nullable) = false];
}

//Space represents a comment or white space.
message Space {
	repeated string Space = 1;
}

//NameExpr is a special type of expression for field names that contains a union of all the possible name expressions.
message NameExpr {
	option (gogoproto.onlyone) = true;
	optional Name Name = 1;
	optional AnyName AnyName = 2;
	optional AnyNameExcept AnyNameExcept = 3;
	optional NameChoice NameChoice = 4;
}

//Name is a name expression and represents a union of all possible name type values.
message Name {
	optional Space Before = 1;

	optional double DoubleValue = 3;
	optional int64 IntValue = 5;
	optional uint64 UintValue = 6;
	optional bool BoolValue = 8;
	optional string StringValue = 9;
	optional bytes BytesValue = 10;
}

//AnyName is a name expression that represents any name.
message AnyName {
	optional Keyword Underscore = 1;
}

//AnyNameExpr is a name expression that represents any name except the specified name expression.
message AnyNameExcept {
	optional Keyword Exclamation = 1;
	optional Keyword OpenParen = 2;
	optional NameExpr Except = 3;
	optional Keyword CloseParen = 4;
}

//NameChoice is a name expression that represents a choice between two possible name expressions.
message NameChoice {
	optional Keyword OpenParen = 1;
	optional NameExpr Left = 2;
	optional Keyword Pipe = 3;
	optional NameExpr Right = 4;
	optional Keyword CloseParen = 5;
}

