// Code generated by goderive DO NOT EDIT.

package ast

import (
	"bytes"
	"fmt"
	types "github.com/katydid/validator-gogo-proto/relapse/types"
	"math"
	"strings"
)

// deriveGoStringGrammar returns a recursive representation of this as a valid go string.
func deriveGoStringGrammar(this *Grammar) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Grammar {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Grammar{}\n")
		if this.TopPattern != nil {
			fmt.Fprintf(buf, "this.TopPattern = %s\n", deriveGoStringPattern(this.TopPattern))
		}
		if this.PatternDecls != nil {
			fmt.Fprintf(buf, "this.PatternDecls = %s\n", deriveGoString(this.PatternDecls))
		}
		if this.After != nil {
			fmt.Fprintf(buf, "this.After = %s\n", deriveGoString_(this.After))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringRefLookup returns a recursive representation of this as a valid go string.
func deriveGoStringRefLookup(this RefLookup) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() ast.RefLookup {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(ast.RefLookup)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoStringPattern(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringPattern returns a recursive representation of this as a valid go string.
func deriveGoStringPattern(this *Pattern) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Pattern {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Pattern{}\n")
		if this.Empty != nil {
			fmt.Fprintf(buf, "this.Empty = %s\n", deriveGoString_1(this.Empty))
		}
		if this.TreeNode != nil {
			fmt.Fprintf(buf, "this.TreeNode = %s\n", deriveGoString_2(this.TreeNode))
		}
		if this.LeafNode != nil {
			fmt.Fprintf(buf, "this.LeafNode = %s\n", deriveGoString_3(this.LeafNode))
		}
		if this.Concat != nil {
			fmt.Fprintf(buf, "this.Concat = %s\n", deriveGoString_4(this.Concat))
		}
		if this.Or != nil {
			fmt.Fprintf(buf, "this.Or = %s\n", deriveGoString_5(this.Or))
		}
		if this.And != nil {
			fmt.Fprintf(buf, "this.And = %s\n", deriveGoString_6(this.And))
		}
		if this.ZeroOrMore != nil {
			fmt.Fprintf(buf, "this.ZeroOrMore = %s\n", deriveGoString_7(this.ZeroOrMore))
		}
		if this.Reference != nil {
			fmt.Fprintf(buf, "this.Reference = %s\n", deriveGoString_8(this.Reference))
		}
		if this.Not != nil {
			fmt.Fprintf(buf, "this.Not = %s\n", deriveGoString_9(this.Not))
		}
		if this.ZAny != nil {
			fmt.Fprintf(buf, "this.ZAny = %s\n", deriveGoString_10(this.ZAny))
		}
		if this.Contains != nil {
			fmt.Fprintf(buf, "this.Contains = %s\n", deriveGoString_11(this.Contains))
		}
		if this.Optional != nil {
			fmt.Fprintf(buf, "this.Optional = %s\n", deriveGoString_12(this.Optional))
		}
		if this.Interleave != nil {
			fmt.Fprintf(buf, "this.Interleave = %s\n", deriveGoString_13(this.Interleave))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringExpr returns a recursive representation of this as a valid go string.
func deriveGoStringExpr(this *Expr) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Expr {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Expr{}\n")
		if this.RightArrow != nil {
			fmt.Fprintf(buf, "this.RightArrow = %s\n", deriveGoString_14(this.RightArrow))
		}
		if this.Comma != nil {
			fmt.Fprintf(buf, "this.Comma = %s\n", deriveGoString_14(this.Comma))
		}
		if this.Terminal != nil {
			fmt.Fprintf(buf, "this.Terminal = %s\n", deriveGoString_15(this.Terminal))
		}
		if this.List != nil {
			fmt.Fprintf(buf, "this.List = %s\n", deriveGoString_16(this.List))
		}
		if this.Function != nil {
			fmt.Fprintf(buf, "this.Function = %s\n", deriveGoString_17(this.Function))
		}
		if this.BuiltIn != nil {
			fmt.Fprintf(buf, "this.BuiltIn = %s\n", deriveGoString_18(this.BuiltIn))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveDeepCopyGrammar recursively copies the contents of src into dst.
func deriveDeepCopyGrammar(dst, src *Grammar) {
	if src.TopPattern == nil {
		dst.TopPattern = nil
	} else {
		dst.TopPattern = new(Pattern)
		deriveDeepCopyPattern(dst.TopPattern, src.TopPattern)
	}
	if src.PatternDecls == nil {
		dst.PatternDecls = nil
	} else {
		if dst.PatternDecls != nil {
			if len(src.PatternDecls) > len(dst.PatternDecls) {
				if cap(dst.PatternDecls) >= len(src.PatternDecls) {
					dst.PatternDecls = (dst.PatternDecls)[:len(src.PatternDecls)]
				} else {
					dst.PatternDecls = make([]*PatternDecl, len(src.PatternDecls))
				}
			} else if len(src.PatternDecls) < len(dst.PatternDecls) {
				dst.PatternDecls = (dst.PatternDecls)[:len(src.PatternDecls)]
			}
		} else {
			dst.PatternDecls = make([]*PatternDecl, len(src.PatternDecls))
		}
		deriveDeepCopy(dst.PatternDecls, src.PatternDecls)
	}
	if src.After == nil {
		dst.After = nil
	} else {
		dst.After = new(Space)
		deriveDeepCopy_(dst.After, src.After)
	}
}

// deriveDeepCopyPattern recursively copies the contents of src into dst.
func deriveDeepCopyPattern(dst, src *Pattern) {
	if src.Empty == nil {
		dst.Empty = nil
	} else {
		dst.Empty = new(Empty)
		deriveDeepCopy_1(dst.Empty, src.Empty)
	}
	if src.TreeNode == nil {
		dst.TreeNode = nil
	} else {
		dst.TreeNode = new(TreeNode)
		deriveDeepCopy_2(dst.TreeNode, src.TreeNode)
	}
	if src.LeafNode == nil {
		dst.LeafNode = nil
	} else {
		dst.LeafNode = new(LeafNode)
		deriveDeepCopy_3(dst.LeafNode, src.LeafNode)
	}
	if src.Concat == nil {
		dst.Concat = nil
	} else {
		dst.Concat = new(Concat)
		deriveDeepCopy_4(dst.Concat, src.Concat)
	}
	if src.Or == nil {
		dst.Or = nil
	} else {
		dst.Or = new(Or)
		deriveDeepCopy_5(dst.Or, src.Or)
	}
	if src.And == nil {
		dst.And = nil
	} else {
		dst.And = new(And)
		deriveDeepCopy_6(dst.And, src.And)
	}
	if src.ZeroOrMore == nil {
		dst.ZeroOrMore = nil
	} else {
		dst.ZeroOrMore = new(ZeroOrMore)
		deriveDeepCopy_7(dst.ZeroOrMore, src.ZeroOrMore)
	}
	if src.Reference == nil {
		dst.Reference = nil
	} else {
		dst.Reference = new(Reference)
		deriveDeepCopy_8(dst.Reference, src.Reference)
	}
	if src.Not == nil {
		dst.Not = nil
	} else {
		dst.Not = new(Not)
		deriveDeepCopy_9(dst.Not, src.Not)
	}
	if src.ZAny == nil {
		dst.ZAny = nil
	} else {
		dst.ZAny = new(ZAny)
		deriveDeepCopy_10(dst.ZAny, src.ZAny)
	}
	if src.Contains == nil {
		dst.Contains = nil
	} else {
		dst.Contains = new(Contains)
		deriveDeepCopy_11(dst.Contains, src.Contains)
	}
	if src.Optional == nil {
		dst.Optional = nil
	} else {
		dst.Optional = new(Optional)
		deriveDeepCopy_12(dst.Optional, src.Optional)
	}
	if src.Interleave == nil {
		dst.Interleave = nil
	} else {
		dst.Interleave = new(Interleave)
		deriveDeepCopy_13(dst.Interleave, src.Interleave)
	}
}

// deriveDeepCopyExpr recursively copies the contents of src into dst.
func deriveDeepCopyExpr(dst, src *Expr) {
	if src.RightArrow == nil {
		dst.RightArrow = nil
	} else {
		dst.RightArrow = new(Keyword)
		deriveDeepCopy_14(dst.RightArrow, src.RightArrow)
	}
	if src.Comma == nil {
		dst.Comma = nil
	} else {
		dst.Comma = new(Keyword)
		deriveDeepCopy_14(dst.Comma, src.Comma)
	}
	if src.Terminal == nil {
		dst.Terminal = nil
	} else {
		dst.Terminal = new(Terminal)
		deriveDeepCopy_15(dst.Terminal, src.Terminal)
	}
	if src.List == nil {
		dst.List = nil
	} else {
		dst.List = new(List)
		deriveDeepCopy_16(dst.List, src.List)
	}
	if src.Function == nil {
		dst.Function = nil
	} else {
		dst.Function = new(Function)
		deriveDeepCopy_17(dst.Function, src.Function)
	}
	if src.BuiltIn == nil {
		dst.BuiltIn = nil
	} else {
		dst.BuiltIn = new(BuiltIn)
		deriveDeepCopy_18(dst.BuiltIn, src.BuiltIn)
	}
}

// deriveComparePattern returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveComparePattern(this, that *Pattern) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare(this.Empty, that.Empty); c != 0 {
		return c
	}
	if c := deriveCompare_(this.TreeNode, that.TreeNode); c != 0 {
		return c
	}
	if c := deriveCompare_1(this.LeafNode, that.LeafNode); c != 0 {
		return c
	}
	if c := deriveCompare_2(this.Concat, that.Concat); c != 0 {
		return c
	}
	if c := deriveCompare_3(this.Or, that.Or); c != 0 {
		return c
	}
	if c := deriveCompare_4(this.And, that.And); c != 0 {
		return c
	}
	if c := deriveCompare_5(this.ZeroOrMore, that.ZeroOrMore); c != 0 {
		return c
	}
	if c := deriveCompare_6(this.Reference, that.Reference); c != 0 {
		return c
	}
	if c := deriveCompare_7(this.Not, that.Not); c != 0 {
		return c
	}
	if c := deriveCompare_8(this.ZAny, that.ZAny); c != 0 {
		return c
	}
	if c := deriveCompare_9(this.Contains, that.Contains); c != 0 {
		return c
	}
	if c := deriveCompare_10(this.Optional, that.Optional); c != 0 {
		return c
	}
	if c := deriveCompare_11(this.Interleave, that.Interleave); c != 0 {
		return c
	}
	return 0
}

// deriveCompareNameExpr returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompareNameExpr(this, that *NameExpr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_12(this.Name, that.Name); c != 0 {
		return c
	}
	if c := deriveCompare_13(this.AnyName, that.AnyName); c != 0 {
		return c
	}
	if c := deriveCompare_14(this.AnyNameExcept, that.AnyNameExcept); c != 0 {
		return c
	}
	if c := deriveCompare_15(this.NameChoice, that.NameChoice); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_18 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_18(this, that *Space) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_16(this.Space, that.Space); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_19 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_19(this, that *float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_f(*this, *that)
}

// deriveCompare_20 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_20(this, that *int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_i(*this, *that)
}

// deriveCompare_21 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_21(this, that *uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_u(*this, *that)
}

// deriveCompare_22 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_22(this, that *bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_b(*this, *that)
}

// deriveCompare_23 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_23(this, that *string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_s(*this, *that)
}

// deriveCompare_29 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_29(this, that *Variable) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_T(this.Type, that.Type); c != 0 {
		return c
	}
	return 0
}

// deriveEqualGrammar returns whether this and that are equal.
func deriveEqualGrammar(this, that *Grammar) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.TopPattern.Equal(that.TopPattern) &&
			deriveEqual(this.PatternDecls, that.PatternDecls) &&
			deriveEqual_(this.After, that.After)
}

// deriveEqualPattern returns whether this and that are equal.
func deriveEqualPattern(this, that *Pattern) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_1(this.Empty, that.Empty) &&
			deriveEqual_2(this.TreeNode, that.TreeNode) &&
			deriveEqual_3(this.LeafNode, that.LeafNode) &&
			deriveEqual_4(this.Concat, that.Concat) &&
			deriveEqual_5(this.Or, that.Or) &&
			deriveEqual_6(this.And, that.And) &&
			deriveEqual_7(this.ZeroOrMore, that.ZeroOrMore) &&
			deriveEqual_8(this.Reference, that.Reference) &&
			deriveEqual_9(this.Not, that.Not) &&
			deriveEqual_10(this.ZAny, that.ZAny) &&
			deriveEqual_11(this.Contains, that.Contains) &&
			deriveEqual_12(this.Optional, that.Optional) &&
			deriveEqual_13(this.Interleave, that.Interleave)
}

// deriveEqualNameExpr returns whether this and that are equal.
func deriveEqualNameExpr(this, that *NameExpr) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_14(this.Name, that.Name) &&
			deriveEqual_15(this.AnyName, that.AnyName) &&
			deriveEqual_16(this.AnyNameExcept, that.AnyNameExcept) &&
			deriveEqual_17(this.NameChoice, that.NameChoice)
}

// deriveEqual_ returns whether this and that are equal.
func deriveEqual_(this, that *Space) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_18(this.Space, that.Space)
}

// deriveEqual_26 returns whether this and that are equal.
func deriveEqual_26(this, that *Variable) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Type == that.Type
}

// deriveHash returns the hash of the object.
func deriveHash(object *Pattern) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_(object.Empty)
	h = 31*h + deriveHash_1(object.TreeNode)
	h = 31*h + deriveHash_2(object.LeafNode)
	h = 31*h + deriveHash_3(object.Concat)
	h = 31*h + deriveHash_4(object.Or)
	h = 31*h + deriveHash_5(object.And)
	h = 31*h + deriveHash_6(object.ZeroOrMore)
	h = 31*h + deriveHash_7(object.Reference)
	h = 31*h + deriveHash_8(object.Not)
	h = 31*h + deriveHash_9(object.ZAny)
	h = 31*h + deriveHash_10(object.Contains)
	h = 31*h + deriveHash_11(object.Optional)
	h = 31*h + deriveHash_12(object.Interleave)
	return h
}

// deriveGoString returns a recursive representation of this as a valid go string.
func deriveGoString(this []*PatternDecl) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*ast.PatternDecl {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*ast.PatternDecl, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_19(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_ returns a recursive representation of this as a valid go string.
func deriveGoString_(this *Space) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Space {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Space{}\n")
		if this.Space != nil {
			fmt.Fprintf(buf, "this.Space = %#v\n", this.Space)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_1 returns a recursive representation of this as a valid go string.
func deriveGoString_1(this *Empty) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Empty {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Empty{}\n")
		if this.Empty != nil {
			fmt.Fprintf(buf, "this.Empty = %s\n", deriveGoString_14(this.Empty))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_2 returns a recursive representation of this as a valid go string.
func deriveGoString_2(this *TreeNode) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.TreeNode {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.TreeNode{}\n")
		if this.Name != nil {
			fmt.Fprintf(buf, "this.Name = %s\n", deriveGoString_20(this.Name))
		}
		if this.Colon != nil {
			fmt.Fprintf(buf, "this.Colon = %s\n", deriveGoString_14(this.Colon))
		}
		if this.Pattern != nil {
			fmt.Fprintf(buf, "this.Pattern = %s\n", deriveGoStringPattern(this.Pattern))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_3 returns a recursive representation of this as a valid go string.
func deriveGoString_3(this *LeafNode) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.LeafNode {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.LeafNode{}\n")
		if this.Expr != nil {
			fmt.Fprintf(buf, "this.Expr = %s\n", deriveGoStringExpr(this.Expr))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_4 returns a recursive representation of this as a valid go string.
func deriveGoString_4(this *Concat) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Concat {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Concat{}\n")
		if this.OpenBracket != nil {
			fmt.Fprintf(buf, "this.OpenBracket = %s\n", deriveGoString_14(this.OpenBracket))
		}
		if this.LeftPattern != nil {
			fmt.Fprintf(buf, "this.LeftPattern = %s\n", deriveGoStringPattern(this.LeftPattern))
		}
		if this.Comma != nil {
			fmt.Fprintf(buf, "this.Comma = %s\n", deriveGoString_14(this.Comma))
		}
		if this.RightPattern != nil {
			fmt.Fprintf(buf, "this.RightPattern = %s\n", deriveGoStringPattern(this.RightPattern))
		}
		if this.ExtraComma != nil {
			fmt.Fprintf(buf, "this.ExtraComma = %s\n", deriveGoString_14(this.ExtraComma))
		}
		if this.CloseBracket != nil {
			fmt.Fprintf(buf, "this.CloseBracket = %s\n", deriveGoString_14(this.CloseBracket))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_5 returns a recursive representation of this as a valid go string.
func deriveGoString_5(this *Or) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Or {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Or{}\n")
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.LeftPattern != nil {
			fmt.Fprintf(buf, "this.LeftPattern = %s\n", deriveGoStringPattern(this.LeftPattern))
		}
		if this.Pipe != nil {
			fmt.Fprintf(buf, "this.Pipe = %s\n", deriveGoString_14(this.Pipe))
		}
		if this.RightPattern != nil {
			fmt.Fprintf(buf, "this.RightPattern = %s\n", deriveGoStringPattern(this.RightPattern))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_6 returns a recursive representation of this as a valid go string.
func deriveGoString_6(this *And) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.And {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.And{}\n")
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.LeftPattern != nil {
			fmt.Fprintf(buf, "this.LeftPattern = %s\n", deriveGoStringPattern(this.LeftPattern))
		}
		if this.Ampersand != nil {
			fmt.Fprintf(buf, "this.Ampersand = %s\n", deriveGoString_14(this.Ampersand))
		}
		if this.RightPattern != nil {
			fmt.Fprintf(buf, "this.RightPattern = %s\n", deriveGoStringPattern(this.RightPattern))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_7 returns a recursive representation of this as a valid go string.
func deriveGoString_7(this *ZeroOrMore) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.ZeroOrMore {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.ZeroOrMore{}\n")
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.Pattern != nil {
			fmt.Fprintf(buf, "this.Pattern = %s\n", deriveGoStringPattern(this.Pattern))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		if this.Star != nil {
			fmt.Fprintf(buf, "this.Star = %s\n", deriveGoString_14(this.Star))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_8 returns a recursive representation of this as a valid go string.
func deriveGoString_8(this *Reference) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Reference {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Reference{}\n")
		if this.At != nil {
			fmt.Fprintf(buf, "this.At = %s\n", deriveGoString_14(this.At))
		}
		fmt.Fprintf(buf, "this.Name = %#v\n", this.Name)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_9 returns a recursive representation of this as a valid go string.
func deriveGoString_9(this *Not) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Not {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Not{}\n")
		if this.Exclamation != nil {
			fmt.Fprintf(buf, "this.Exclamation = %s\n", deriveGoString_14(this.Exclamation))
		}
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.Pattern != nil {
			fmt.Fprintf(buf, "this.Pattern = %s\n", deriveGoStringPattern(this.Pattern))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_10 returns a recursive representation of this as a valid go string.
func deriveGoString_10(this *ZAny) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.ZAny {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.ZAny{}\n")
		if this.Star != nil {
			fmt.Fprintf(buf, "this.Star = %s\n", deriveGoString_14(this.Star))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_11 returns a recursive representation of this as a valid go string.
func deriveGoString_11(this *Contains) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Contains {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Contains{}\n")
		if this.Dot != nil {
			fmt.Fprintf(buf, "this.Dot = %s\n", deriveGoString_14(this.Dot))
		}
		if this.Pattern != nil {
			fmt.Fprintf(buf, "this.Pattern = %s\n", deriveGoStringPattern(this.Pattern))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_12 returns a recursive representation of this as a valid go string.
func deriveGoString_12(this *Optional) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Optional {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Optional{}\n")
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.Pattern != nil {
			fmt.Fprintf(buf, "this.Pattern = %s\n", deriveGoStringPattern(this.Pattern))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		if this.QuestionMark != nil {
			fmt.Fprintf(buf, "this.QuestionMark = %s\n", deriveGoString_14(this.QuestionMark))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_13 returns a recursive representation of this as a valid go string.
func deriveGoString_13(this *Interleave) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Interleave {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Interleave{}\n")
		if this.OpenCurly != nil {
			fmt.Fprintf(buf, "this.OpenCurly = %s\n", deriveGoString_14(this.OpenCurly))
		}
		if this.LeftPattern != nil {
			fmt.Fprintf(buf, "this.LeftPattern = %s\n", deriveGoStringPattern(this.LeftPattern))
		}
		if this.SemiColon != nil {
			fmt.Fprintf(buf, "this.SemiColon = %s\n", deriveGoString_14(this.SemiColon))
		}
		if this.RightPattern != nil {
			fmt.Fprintf(buf, "this.RightPattern = %s\n", deriveGoStringPattern(this.RightPattern))
		}
		if this.ExtraSemiColon != nil {
			fmt.Fprintf(buf, "this.ExtraSemiColon = %s\n", deriveGoString_14(this.ExtraSemiColon))
		}
		if this.CloseCurly != nil {
			fmt.Fprintf(buf, "this.CloseCurly = %s\n", deriveGoString_14(this.CloseCurly))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_14 returns a recursive representation of this as a valid go string.
func deriveGoString_14(this *Keyword) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Keyword {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Keyword{}\n")
		if this.Before != nil {
			fmt.Fprintf(buf, "this.Before = %s\n", deriveGoString_(this.Before))
		}
		fmt.Fprintf(buf, "this.Value = %#v\n", this.Value)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_15 returns a recursive representation of this as a valid go string.
func deriveGoString_15(this *Terminal) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Terminal {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Terminal{}\n")
		if this.Before != nil {
			fmt.Fprintf(buf, "this.Before = %s\n", deriveGoString_(this.Before))
		}
		fmt.Fprintf(buf, "this.Literal = %#v\n", this.Literal)
		if this.DoubleValue != nil {
			fmt.Fprintf(buf, "this.DoubleValue = func (v float64) *float64 { return &v }(%#v)\n", *this.DoubleValue)
		}
		if this.IntValue != nil {
			fmt.Fprintf(buf, "this.IntValue = func (v int64) *int64 { return &v }(%#v)\n", *this.IntValue)
		}
		if this.UintValue != nil {
			fmt.Fprintf(buf, "this.UintValue = func (v uint64) *uint64 { return &v }(%#v)\n", *this.UintValue)
		}
		if this.BoolValue != nil {
			fmt.Fprintf(buf, "this.BoolValue = func (v bool) *bool { return &v }(%#v)\n", *this.BoolValue)
		}
		if this.StringValue != nil {
			fmt.Fprintf(buf, "this.StringValue = func (v string) *string { return &v }(%#v)\n", *this.StringValue)
		}
		if this.BytesValue != nil {
			fmt.Fprintf(buf, "this.BytesValue = %#v\n", this.BytesValue)
		}
		if this.Variable != nil {
			fmt.Fprintf(buf, "this.Variable = %s\n", deriveGoString_21(this.Variable))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_16 returns a recursive representation of this as a valid go string.
func deriveGoString_16(this *List) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.List {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.List{}\n")
		if this.Before != nil {
			fmt.Fprintf(buf, "this.Before = %s\n", deriveGoString_(this.Before))
		}
		fmt.Fprintf(buf, "this.Type = %#v\n", this.Type)
		if this.OpenCurly != nil {
			fmt.Fprintf(buf, "this.OpenCurly = %s\n", deriveGoString_14(this.OpenCurly))
		}
		if this.Elems != nil {
			fmt.Fprintf(buf, "this.Elems = %s\n", deriveGoString_22(this.Elems))
		}
		if this.CloseCurly != nil {
			fmt.Fprintf(buf, "this.CloseCurly = %s\n", deriveGoString_14(this.CloseCurly))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_17 returns a recursive representation of this as a valid go string.
func deriveGoString_17(this *Function) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Function {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Function{}\n")
		if this.Before != nil {
			fmt.Fprintf(buf, "this.Before = %s\n", deriveGoString_(this.Before))
		}
		fmt.Fprintf(buf, "this.Name = %#v\n", this.Name)
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.Params != nil {
			fmt.Fprintf(buf, "this.Params = %s\n", deriveGoString_22(this.Params))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_18 returns a recursive representation of this as a valid go string.
func deriveGoString_18(this *BuiltIn) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.BuiltIn {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.BuiltIn{}\n")
		if this.Symbol != nil {
			fmt.Fprintf(buf, "this.Symbol = %s\n", deriveGoString_14(this.Symbol))
		}
		if this.Expr != nil {
			fmt.Fprintf(buf, "this.Expr = %s\n", deriveGoStringExpr(this.Expr))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveDeepCopy recursively copies the contents of src into dst.
func deriveDeepCopy(dst, src []*PatternDecl) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(PatternDecl)
			deriveDeepCopy_19(dst[src_i], src_value)
		}
	}
}

// deriveDeepCopy_ recursively copies the contents of src into dst.
func deriveDeepCopy_(dst, src *Space) {
	if src.Space == nil {
		dst.Space = nil
	} else {
		if dst.Space != nil {
			if len(src.Space) > len(dst.Space) {
				if cap(dst.Space) >= len(src.Space) {
					dst.Space = (dst.Space)[:len(src.Space)]
				} else {
					dst.Space = make([]string, len(src.Space))
				}
			} else if len(src.Space) < len(dst.Space) {
				dst.Space = (dst.Space)[:len(src.Space)]
			}
		} else {
			dst.Space = make([]string, len(src.Space))
		}
		copy(dst.Space, src.Space)
	}
}

// deriveDeepCopy_1 recursively copies the contents of src into dst.
func deriveDeepCopy_1(dst, src *Empty) {
	if src.Empty == nil {
		dst.Empty = nil
	} else {
		dst.Empty = new(Keyword)
		deriveDeepCopy_14(dst.Empty, src.Empty)
	}
}

// deriveDeepCopy_2 recursively copies the contents of src into dst.
func deriveDeepCopy_2(dst, src *TreeNode) {
	if src.Name == nil {
		dst.Name = nil
	} else {
		dst.Name = new(NameExpr)
		deriveDeepCopy_20(dst.Name, src.Name)
	}
	if src.Colon == nil {
		dst.Colon = nil
	} else {
		dst.Colon = new(Keyword)
		deriveDeepCopy_14(dst.Colon, src.Colon)
	}
	if src.Pattern == nil {
		dst.Pattern = nil
	} else {
		dst.Pattern = new(Pattern)
		deriveDeepCopyPattern(dst.Pattern, src.Pattern)
	}
}

// deriveDeepCopy_3 recursively copies the contents of src into dst.
func deriveDeepCopy_3(dst, src *LeafNode) {
	if src.Expr == nil {
		dst.Expr = nil
	} else {
		dst.Expr = new(Expr)
		deriveDeepCopyExpr(dst.Expr, src.Expr)
	}
}

// deriveDeepCopy_4 recursively copies the contents of src into dst.
func deriveDeepCopy_4(dst, src *Concat) {
	if src.OpenBracket == nil {
		dst.OpenBracket = nil
	} else {
		dst.OpenBracket = new(Keyword)
		deriveDeepCopy_14(dst.OpenBracket, src.OpenBracket)
	}
	if src.LeftPattern == nil {
		dst.LeftPattern = nil
	} else {
		dst.LeftPattern = new(Pattern)
		deriveDeepCopyPattern(dst.LeftPattern, src.LeftPattern)
	}
	if src.Comma == nil {
		dst.Comma = nil
	} else {
		dst.Comma = new(Keyword)
		deriveDeepCopy_14(dst.Comma, src.Comma)
	}
	if src.RightPattern == nil {
		dst.RightPattern = nil
	} else {
		dst.RightPattern = new(Pattern)
		deriveDeepCopyPattern(dst.RightPattern, src.RightPattern)
	}
	if src.ExtraComma == nil {
		dst.ExtraComma = nil
	} else {
		dst.ExtraComma = new(Keyword)
		deriveDeepCopy_14(dst.ExtraComma, src.ExtraComma)
	}
	if src.CloseBracket == nil {
		dst.CloseBracket = nil
	} else {
		dst.CloseBracket = new(Keyword)
		deriveDeepCopy_14(dst.CloseBracket, src.CloseBracket)
	}
}

// deriveDeepCopy_5 recursively copies the contents of src into dst.
func deriveDeepCopy_5(dst, src *Or) {
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.LeftPattern == nil {
		dst.LeftPattern = nil
	} else {
		dst.LeftPattern = new(Pattern)
		deriveDeepCopyPattern(dst.LeftPattern, src.LeftPattern)
	}
	if src.Pipe == nil {
		dst.Pipe = nil
	} else {
		dst.Pipe = new(Keyword)
		deriveDeepCopy_14(dst.Pipe, src.Pipe)
	}
	if src.RightPattern == nil {
		dst.RightPattern = nil
	} else {
		dst.RightPattern = new(Pattern)
		deriveDeepCopyPattern(dst.RightPattern, src.RightPattern)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
}

// deriveDeepCopy_6 recursively copies the contents of src into dst.
func deriveDeepCopy_6(dst, src *And) {
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.LeftPattern == nil {
		dst.LeftPattern = nil
	} else {
		dst.LeftPattern = new(Pattern)
		deriveDeepCopyPattern(dst.LeftPattern, src.LeftPattern)
	}
	if src.Ampersand == nil {
		dst.Ampersand = nil
	} else {
		dst.Ampersand = new(Keyword)
		deriveDeepCopy_14(dst.Ampersand, src.Ampersand)
	}
	if src.RightPattern == nil {
		dst.RightPattern = nil
	} else {
		dst.RightPattern = new(Pattern)
		deriveDeepCopyPattern(dst.RightPattern, src.RightPattern)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
}

// deriveDeepCopy_7 recursively copies the contents of src into dst.
func deriveDeepCopy_7(dst, src *ZeroOrMore) {
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.Pattern == nil {
		dst.Pattern = nil
	} else {
		dst.Pattern = new(Pattern)
		deriveDeepCopyPattern(dst.Pattern, src.Pattern)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
	if src.Star == nil {
		dst.Star = nil
	} else {
		dst.Star = new(Keyword)
		deriveDeepCopy_14(dst.Star, src.Star)
	}
}

// deriveDeepCopy_8 recursively copies the contents of src into dst.
func deriveDeepCopy_8(dst, src *Reference) {
	if src.At == nil {
		dst.At = nil
	} else {
		dst.At = new(Keyword)
		deriveDeepCopy_14(dst.At, src.At)
	}
	dst.Name = src.Name
}

// deriveDeepCopy_9 recursively copies the contents of src into dst.
func deriveDeepCopy_9(dst, src *Not) {
	if src.Exclamation == nil {
		dst.Exclamation = nil
	} else {
		dst.Exclamation = new(Keyword)
		deriveDeepCopy_14(dst.Exclamation, src.Exclamation)
	}
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.Pattern == nil {
		dst.Pattern = nil
	} else {
		dst.Pattern = new(Pattern)
		deriveDeepCopyPattern(dst.Pattern, src.Pattern)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
}

// deriveDeepCopy_10 recursively copies the contents of src into dst.
func deriveDeepCopy_10(dst, src *ZAny) {
	if src.Star == nil {
		dst.Star = nil
	} else {
		dst.Star = new(Keyword)
		deriveDeepCopy_14(dst.Star, src.Star)
	}
}

// deriveDeepCopy_11 recursively copies the contents of src into dst.
func deriveDeepCopy_11(dst, src *Contains) {
	if src.Dot == nil {
		dst.Dot = nil
	} else {
		dst.Dot = new(Keyword)
		deriveDeepCopy_14(dst.Dot, src.Dot)
	}
	if src.Pattern == nil {
		dst.Pattern = nil
	} else {
		dst.Pattern = new(Pattern)
		deriveDeepCopyPattern(dst.Pattern, src.Pattern)
	}
}

// deriveDeepCopy_12 recursively copies the contents of src into dst.
func deriveDeepCopy_12(dst, src *Optional) {
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.Pattern == nil {
		dst.Pattern = nil
	} else {
		dst.Pattern = new(Pattern)
		deriveDeepCopyPattern(dst.Pattern, src.Pattern)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
	if src.QuestionMark == nil {
		dst.QuestionMark = nil
	} else {
		dst.QuestionMark = new(Keyword)
		deriveDeepCopy_14(dst.QuestionMark, src.QuestionMark)
	}
}

// deriveDeepCopy_13 recursively copies the contents of src into dst.
func deriveDeepCopy_13(dst, src *Interleave) {
	if src.OpenCurly == nil {
		dst.OpenCurly = nil
	} else {
		dst.OpenCurly = new(Keyword)
		deriveDeepCopy_14(dst.OpenCurly, src.OpenCurly)
	}
	if src.LeftPattern == nil {
		dst.LeftPattern = nil
	} else {
		dst.LeftPattern = new(Pattern)
		deriveDeepCopyPattern(dst.LeftPattern, src.LeftPattern)
	}
	if src.SemiColon == nil {
		dst.SemiColon = nil
	} else {
		dst.SemiColon = new(Keyword)
		deriveDeepCopy_14(dst.SemiColon, src.SemiColon)
	}
	if src.RightPattern == nil {
		dst.RightPattern = nil
	} else {
		dst.RightPattern = new(Pattern)
		deriveDeepCopyPattern(dst.RightPattern, src.RightPattern)
	}
	if src.ExtraSemiColon == nil {
		dst.ExtraSemiColon = nil
	} else {
		dst.ExtraSemiColon = new(Keyword)
		deriveDeepCopy_14(dst.ExtraSemiColon, src.ExtraSemiColon)
	}
	if src.CloseCurly == nil {
		dst.CloseCurly = nil
	} else {
		dst.CloseCurly = new(Keyword)
		deriveDeepCopy_14(dst.CloseCurly, src.CloseCurly)
	}
}

// deriveDeepCopy_14 recursively copies the contents of src into dst.
func deriveDeepCopy_14(dst, src *Keyword) {
	if src.Before == nil {
		dst.Before = nil
	} else {
		dst.Before = new(Space)
		deriveDeepCopy_(dst.Before, src.Before)
	}
	dst.Value = src.Value
}

// deriveDeepCopy_15 recursively copies the contents of src into dst.
func deriveDeepCopy_15(dst, src *Terminal) {
	if src.Before == nil {
		dst.Before = nil
	} else {
		dst.Before = new(Space)
		deriveDeepCopy_(dst.Before, src.Before)
	}
	dst.Literal = src.Literal
	if src.DoubleValue == nil {
		dst.DoubleValue = nil
	} else {
		dst.DoubleValue = new(float64)
		*dst.DoubleValue = *src.DoubleValue
	}
	if src.IntValue == nil {
		dst.IntValue = nil
	} else {
		dst.IntValue = new(int64)
		*dst.IntValue = *src.IntValue
	}
	if src.UintValue == nil {
		dst.UintValue = nil
	} else {
		dst.UintValue = new(uint64)
		*dst.UintValue = *src.UintValue
	}
	if src.BoolValue == nil {
		dst.BoolValue = nil
	} else {
		dst.BoolValue = new(bool)
		*dst.BoolValue = *src.BoolValue
	}
	if src.StringValue == nil {
		dst.StringValue = nil
	} else {
		dst.StringValue = new(string)
		*dst.StringValue = *src.StringValue
	}
	if src.BytesValue == nil {
		dst.BytesValue = nil
	} else {
		if dst.BytesValue != nil {
			if len(src.BytesValue) > len(dst.BytesValue) {
				if cap(dst.BytesValue) >= len(src.BytesValue) {
					dst.BytesValue = (dst.BytesValue)[:len(src.BytesValue)]
				} else {
					dst.BytesValue = make([]byte, len(src.BytesValue))
				}
			} else if len(src.BytesValue) < len(dst.BytesValue) {
				dst.BytesValue = (dst.BytesValue)[:len(src.BytesValue)]
			}
		} else {
			dst.BytesValue = make([]byte, len(src.BytesValue))
		}
		copy(dst.BytesValue, src.BytesValue)
	}
	if src.Variable == nil {
		dst.Variable = nil
	} else {
		dst.Variable = new(Variable)
		*dst.Variable = *src.Variable
	}
}

// deriveDeepCopy_16 recursively copies the contents of src into dst.
func deriveDeepCopy_16(dst, src *List) {
	if src.Before == nil {
		dst.Before = nil
	} else {
		dst.Before = new(Space)
		deriveDeepCopy_(dst.Before, src.Before)
	}
	dst.Type = src.Type
	if src.OpenCurly == nil {
		dst.OpenCurly = nil
	} else {
		dst.OpenCurly = new(Keyword)
		deriveDeepCopy_14(dst.OpenCurly, src.OpenCurly)
	}
	if src.Elems == nil {
		dst.Elems = nil
	} else {
		if dst.Elems != nil {
			if len(src.Elems) > len(dst.Elems) {
				if cap(dst.Elems) >= len(src.Elems) {
					dst.Elems = (dst.Elems)[:len(src.Elems)]
				} else {
					dst.Elems = make([]*Expr, len(src.Elems))
				}
			} else if len(src.Elems) < len(dst.Elems) {
				dst.Elems = (dst.Elems)[:len(src.Elems)]
			}
		} else {
			dst.Elems = make([]*Expr, len(src.Elems))
		}
		deriveDeepCopy_21(dst.Elems, src.Elems)
	}
	if src.CloseCurly == nil {
		dst.CloseCurly = nil
	} else {
		dst.CloseCurly = new(Keyword)
		deriveDeepCopy_14(dst.CloseCurly, src.CloseCurly)
	}
}

// deriveDeepCopy_17 recursively copies the contents of src into dst.
func deriveDeepCopy_17(dst, src *Function) {
	if src.Before == nil {
		dst.Before = nil
	} else {
		dst.Before = new(Space)
		deriveDeepCopy_(dst.Before, src.Before)
	}
	dst.Name = src.Name
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.Params == nil {
		dst.Params = nil
	} else {
		if dst.Params != nil {
			if len(src.Params) > len(dst.Params) {
				if cap(dst.Params) >= len(src.Params) {
					dst.Params = (dst.Params)[:len(src.Params)]
				} else {
					dst.Params = make([]*Expr, len(src.Params))
				}
			} else if len(src.Params) < len(dst.Params) {
				dst.Params = (dst.Params)[:len(src.Params)]
			}
		} else {
			dst.Params = make([]*Expr, len(src.Params))
		}
		deriveDeepCopy_21(dst.Params, src.Params)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
}

// deriveDeepCopy_18 recursively copies the contents of src into dst.
func deriveDeepCopy_18(dst, src *BuiltIn) {
	if src.Symbol == nil {
		dst.Symbol = nil
	} else {
		dst.Symbol = new(Keyword)
		deriveDeepCopy_14(dst.Symbol, src.Symbol)
	}
	if src.Expr == nil {
		dst.Expr = nil
	} else {
		dst.Expr = new(Expr)
		deriveDeepCopyExpr(dst.Expr, src.Expr)
	}
}

// deriveCompare returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare(this, that *Empty) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Empty, that.Empty); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_ returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_(this, that *TreeNode) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Name.Compare(that.Name); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Colon, that.Colon); c != 0 {
		return c
	}
	if c := this.Pattern.Compare(that.Pattern); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_1 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_1(this, that *LeafNode) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_24(this.Expr, that.Expr); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_2 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_2(this, that *Concat) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenBracket, that.OpenBracket); c != 0 {
		return c
	}
	if c := this.LeftPattern.Compare(that.LeftPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Comma, that.Comma); c != 0 {
		return c
	}
	if c := this.RightPattern.Compare(that.RightPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.ExtraComma, that.ExtraComma); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseBracket, that.CloseBracket); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_3 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_3(this, that *Or) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.LeftPattern.Compare(that.LeftPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Pipe, that.Pipe); c != 0 {
		return c
	}
	if c := this.RightPattern.Compare(that.RightPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_4 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_4(this, that *And) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.LeftPattern.Compare(that.LeftPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Ampersand, that.Ampersand); c != 0 {
		return c
	}
	if c := this.RightPattern.Compare(that.RightPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_5 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_5(this, that *ZeroOrMore) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.Pattern.Compare(that.Pattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Star, that.Star); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_6 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_6(this, that *Reference) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.At, that.At); c != 0 {
		return c
	}
	if c := strings.Compare(this.Name, that.Name); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_7 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_7(this, that *Not) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Exclamation, that.Exclamation); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.Pattern.Compare(that.Pattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_8 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_8(this, that *ZAny) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Star, that.Star); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_9 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_9(this, that *Contains) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Dot, that.Dot); c != 0 {
		return c
	}
	if c := this.Pattern.Compare(that.Pattern); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_10 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_10(this, that *Optional) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.Pattern.Compare(that.Pattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.QuestionMark, that.QuestionMark); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_11 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_11(this, that *Interleave) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenCurly, that.OpenCurly); c != 0 {
		return c
	}
	if c := this.LeftPattern.Compare(that.LeftPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.SemiColon, that.SemiColon); c != 0 {
		return c
	}
	if c := this.RightPattern.Compare(that.RightPattern); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.ExtraSemiColon, that.ExtraSemiColon); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseCurly, that.CloseCurly); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_12 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_12(this, that *Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_18(this.Before, that.Before); c != 0 {
		return c
	}
	if c := deriveCompare_19(this.DoubleValue, that.DoubleValue); c != 0 {
		return c
	}
	if c := deriveCompare_20(this.IntValue, that.IntValue); c != 0 {
		return c
	}
	if c := deriveCompare_21(this.UintValue, that.UintValue); c != 0 {
		return c
	}
	if c := deriveCompare_22(this.BoolValue, that.BoolValue); c != 0 {
		return c
	}
	if c := deriveCompare_23(this.StringValue, that.StringValue); c != 0 {
		return c
	}
	if c := bytes.Compare(this.BytesValue, that.BytesValue); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_13 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_13(this, that *AnyName) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Underscore, that.Underscore); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_14 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_14(this, that *AnyNameExcept) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Exclamation, that.Exclamation); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.Except.Compare(that.Except); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_15 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_15(this, that *NameChoice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := this.Left.Compare(that.Left); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Pipe, that.Pipe); c != 0 {
		return c
	}
	if c := this.Right.Compare(that.Right); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_16 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_16(this, that []string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

// deriveCompare_f returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_f(this, that float64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

// deriveCompare_i returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_i(this, that int64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

// deriveCompare_u returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_u(this, that uint64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

// deriveCompare_b returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_b(this, that bool) int {
	if this == that {
		return 0
	}
	if that {
		return -1
	}
	return 1
}

// deriveCompare_s returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_s(this, that string) int {
	return strings.Compare(this, that)
}

// deriveCompare_T returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_T(this, that types.Type) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

// deriveEqual returns whether this and that are equal.
func deriveEqual(this, that []*PatternDecl) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_19(this[i], that[i])) {
			return false
		}
	}
	return true
}

// deriveEqual_1 returns whether this and that are equal.
func deriveEqual_1(this, that *Empty) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Empty, that.Empty)
}

// deriveEqual_2 returns whether this and that are equal.
func deriveEqual_2(this, that *TreeNode) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name.Equal(that.Name) &&
			deriveEqual_20(this.Colon, that.Colon) &&
			this.Pattern.Equal(that.Pattern)
}

// deriveEqual_3 returns whether this and that are equal.
func deriveEqual_3(this, that *LeafNode) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_21(this.Expr, that.Expr)
}

// deriveEqual_4 returns whether this and that are equal.
func deriveEqual_4(this, that *Concat) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenBracket, that.OpenBracket) &&
			this.LeftPattern.Equal(that.LeftPattern) &&
			deriveEqual_20(this.Comma, that.Comma) &&
			this.RightPattern.Equal(that.RightPattern) &&
			deriveEqual_20(this.ExtraComma, that.ExtraComma) &&
			deriveEqual_20(this.CloseBracket, that.CloseBracket)
}

// deriveEqual_5 returns whether this and that are equal.
func deriveEqual_5(this, that *Or) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.LeftPattern.Equal(that.LeftPattern) &&
			deriveEqual_20(this.Pipe, that.Pipe) &&
			this.RightPattern.Equal(that.RightPattern) &&
			deriveEqual_20(this.CloseParen, that.CloseParen)
}

// deriveEqual_6 returns whether this and that are equal.
func deriveEqual_6(this, that *And) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.LeftPattern.Equal(that.LeftPattern) &&
			deriveEqual_20(this.Ampersand, that.Ampersand) &&
			this.RightPattern.Equal(that.RightPattern) &&
			deriveEqual_20(this.CloseParen, that.CloseParen)
}

// deriveEqual_7 returns whether this and that are equal.
func deriveEqual_7(this, that *ZeroOrMore) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.Pattern.Equal(that.Pattern) &&
			deriveEqual_20(this.CloseParen, that.CloseParen) &&
			deriveEqual_20(this.Star, that.Star)
}

// deriveEqual_8 returns whether this and that are equal.
func deriveEqual_8(this, that *Reference) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.At, that.At) &&
			this.Name == that.Name
}

// deriveEqual_9 returns whether this and that are equal.
func deriveEqual_9(this, that *Not) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Exclamation, that.Exclamation) &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.Pattern.Equal(that.Pattern) &&
			deriveEqual_20(this.CloseParen, that.CloseParen)
}

// deriveEqual_10 returns whether this and that are equal.
func deriveEqual_10(this, that *ZAny) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Star, that.Star)
}

// deriveEqual_11 returns whether this and that are equal.
func deriveEqual_11(this, that *Contains) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Dot, that.Dot) &&
			this.Pattern.Equal(that.Pattern)
}

// deriveEqual_12 returns whether this and that are equal.
func deriveEqual_12(this, that *Optional) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.Pattern.Equal(that.Pattern) &&
			deriveEqual_20(this.CloseParen, that.CloseParen) &&
			deriveEqual_20(this.QuestionMark, that.QuestionMark)
}

// deriveEqual_13 returns whether this and that are equal.
func deriveEqual_13(this, that *Interleave) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenCurly, that.OpenCurly) &&
			this.LeftPattern.Equal(that.LeftPattern) &&
			deriveEqual_20(this.SemiColon, that.SemiColon) &&
			this.RightPattern.Equal(that.RightPattern) &&
			deriveEqual_20(this.ExtraSemiColon, that.ExtraSemiColon) &&
			deriveEqual_20(this.CloseCurly, that.CloseCurly)
}

// deriveEqual_14 returns whether this and that are equal.
func deriveEqual_14(this, that *Name) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_(this.Before, that.Before) &&
			((this.DoubleValue == nil && that.DoubleValue == nil) || (this.DoubleValue != nil && that.DoubleValue != nil && *(this.DoubleValue) == *(that.DoubleValue))) &&
			((this.IntValue == nil && that.IntValue == nil) || (this.IntValue != nil && that.IntValue != nil && *(this.IntValue) == *(that.IntValue))) &&
			((this.UintValue == nil && that.UintValue == nil) || (this.UintValue != nil && that.UintValue != nil && *(this.UintValue) == *(that.UintValue))) &&
			((this.BoolValue == nil && that.BoolValue == nil) || (this.BoolValue != nil && that.BoolValue != nil && *(this.BoolValue) == *(that.BoolValue))) &&
			((this.StringValue == nil && that.StringValue == nil) || (this.StringValue != nil && that.StringValue != nil && *(this.StringValue) == *(that.StringValue))) &&
			bytes.Equal(this.BytesValue, that.BytesValue)
}

// deriveEqual_15 returns whether this and that are equal.
func deriveEqual_15(this, that *AnyName) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Underscore, that.Underscore)
}

// deriveEqual_16 returns whether this and that are equal.
func deriveEqual_16(this, that *AnyNameExcept) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Exclamation, that.Exclamation) &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.Except.Equal(that.Except) &&
			deriveEqual_20(this.CloseParen, that.CloseParen)
}

// deriveEqual_17 returns whether this and that are equal.
func deriveEqual_17(this, that *NameChoice) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			this.Left.Equal(that.Left) &&
			deriveEqual_20(this.Pipe, that.Pipe) &&
			this.Right.Equal(that.Right) &&
			deriveEqual_20(this.CloseParen, that.CloseParen)
}

// deriveEqual_18 returns whether this and that are equal.
func deriveEqual_18(this, that []string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

// deriveHash_ returns the hash of the object.
func deriveHash_(object *Empty) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Empty)
	return h
}

// deriveHash_1 returns the hash of the object.
func deriveHash_1(object *TreeNode) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_14(object.Name)
	h = 31*h + deriveHash_13(object.Colon)
	h = 31*h + deriveHash(object.Pattern)
	return h
}

// deriveHash_2 returns the hash of the object.
func deriveHash_2(object *LeafNode) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_15(object.Expr)
	return h
}

// deriveHash_3 returns the hash of the object.
func deriveHash_3(object *Concat) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenBracket)
	h = 31*h + deriveHash(object.LeftPattern)
	h = 31*h + deriveHash_13(object.Comma)
	h = 31*h + deriveHash(object.RightPattern)
	h = 31*h + deriveHash_13(object.ExtraComma)
	h = 31*h + deriveHash_13(object.CloseBracket)
	return h
}

// deriveHash_4 returns the hash of the object.
func deriveHash_4(object *Or) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash(object.LeftPattern)
	h = 31*h + deriveHash_13(object.Pipe)
	h = 31*h + deriveHash(object.RightPattern)
	h = 31*h + deriveHash_13(object.CloseParen)
	return h
}

// deriveHash_5 returns the hash of the object.
func deriveHash_5(object *And) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash(object.LeftPattern)
	h = 31*h + deriveHash_13(object.Ampersand)
	h = 31*h + deriveHash(object.RightPattern)
	h = 31*h + deriveHash_13(object.CloseParen)
	return h
}

// deriveHash_6 returns the hash of the object.
func deriveHash_6(object *ZeroOrMore) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash(object.Pattern)
	h = 31*h + deriveHash_13(object.CloseParen)
	h = 31*h + deriveHash_13(object.Star)
	return h
}

// deriveHash_7 returns the hash of the object.
func deriveHash_7(object *Reference) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.At)
	h = 31*h + deriveHash_s(object.Name)
	return h
}

// deriveHash_8 returns the hash of the object.
func deriveHash_8(object *Not) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Exclamation)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash(object.Pattern)
	h = 31*h + deriveHash_13(object.CloseParen)
	return h
}

// deriveHash_9 returns the hash of the object.
func deriveHash_9(object *ZAny) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Star)
	return h
}

// deriveHash_10 returns the hash of the object.
func deriveHash_10(object *Contains) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Dot)
	h = 31*h + deriveHash(object.Pattern)
	return h
}

// deriveHash_11 returns the hash of the object.
func deriveHash_11(object *Optional) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash(object.Pattern)
	h = 31*h + deriveHash_13(object.CloseParen)
	h = 31*h + deriveHash_13(object.QuestionMark)
	return h
}

// deriveHash_12 returns the hash of the object.
func deriveHash_12(object *Interleave) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenCurly)
	h = 31*h + deriveHash(object.LeftPattern)
	h = 31*h + deriveHash_13(object.SemiColon)
	h = 31*h + deriveHash(object.RightPattern)
	h = 31*h + deriveHash_13(object.ExtraSemiColon)
	h = 31*h + deriveHash_13(object.CloseCurly)
	return h
}

// deriveGoString_19 returns a recursive representation of this as a valid go string.
func deriveGoString_19(this *PatternDecl) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.PatternDecl {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.PatternDecl{}\n")
		if this.Hash != nil {
			fmt.Fprintf(buf, "this.Hash = %s\n", deriveGoString_14(this.Hash))
		}
		if this.Before != nil {
			fmt.Fprintf(buf, "this.Before = %s\n", deriveGoString_(this.Before))
		}
		fmt.Fprintf(buf, "this.Name = %#v\n", this.Name)
		if this.Eq != nil {
			fmt.Fprintf(buf, "this.Eq = %s\n", deriveGoString_14(this.Eq))
		}
		if this.Pattern != nil {
			fmt.Fprintf(buf, "this.Pattern = %s\n", deriveGoStringPattern(this.Pattern))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_20 returns a recursive representation of this as a valid go string.
func deriveGoString_20(this *NameExpr) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.NameExpr {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.NameExpr{}\n")
		if this.Name != nil {
			fmt.Fprintf(buf, "this.Name = %s\n", deriveGoString_23(this.Name))
		}
		if this.AnyName != nil {
			fmt.Fprintf(buf, "this.AnyName = %s\n", deriveGoString_24(this.AnyName))
		}
		if this.AnyNameExcept != nil {
			fmt.Fprintf(buf, "this.AnyNameExcept = %s\n", deriveGoString_25(this.AnyNameExcept))
		}
		if this.NameChoice != nil {
			fmt.Fprintf(buf, "this.NameChoice = %s\n", deriveGoString_26(this.NameChoice))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_21 returns a recursive representation of this as a valid go string.
func deriveGoString_21(this *Variable) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Variable {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Variable{}\n")
		fmt.Fprintf(buf, "this.Type = %#v\n", this.Type)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_22 returns a recursive representation of this as a valid go string.
func deriveGoString_22(this []*Expr) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*ast.Expr {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*ast.Expr, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringExpr(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveDeepCopy_19 recursively copies the contents of src into dst.
func deriveDeepCopy_19(dst, src *PatternDecl) {
	if src.Hash == nil {
		dst.Hash = nil
	} else {
		dst.Hash = new(Keyword)
		deriveDeepCopy_14(dst.Hash, src.Hash)
	}
	if src.Before == nil {
		dst.Before = nil
	} else {
		dst.Before = new(Space)
		deriveDeepCopy_(dst.Before, src.Before)
	}
	dst.Name = src.Name
	if src.Eq == nil {
		dst.Eq = nil
	} else {
		dst.Eq = new(Keyword)
		deriveDeepCopy_14(dst.Eq, src.Eq)
	}
	if src.Pattern == nil {
		dst.Pattern = nil
	} else {
		dst.Pattern = new(Pattern)
		deriveDeepCopyPattern(dst.Pattern, src.Pattern)
	}
}

// deriveDeepCopy_20 recursively copies the contents of src into dst.
func deriveDeepCopy_20(dst, src *NameExpr) {
	if src.Name == nil {
		dst.Name = nil
	} else {
		dst.Name = new(Name)
		deriveDeepCopy_22(dst.Name, src.Name)
	}
	if src.AnyName == nil {
		dst.AnyName = nil
	} else {
		dst.AnyName = new(AnyName)
		deriveDeepCopy_23(dst.AnyName, src.AnyName)
	}
	if src.AnyNameExcept == nil {
		dst.AnyNameExcept = nil
	} else {
		dst.AnyNameExcept = new(AnyNameExcept)
		deriveDeepCopy_24(dst.AnyNameExcept, src.AnyNameExcept)
	}
	if src.NameChoice == nil {
		dst.NameChoice = nil
	} else {
		dst.NameChoice = new(NameChoice)
		deriveDeepCopy_25(dst.NameChoice, src.NameChoice)
	}
}

// deriveDeepCopy_21 recursively copies the contents of src into dst.
func deriveDeepCopy_21(dst, src []*Expr) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(Expr)
			deriveDeepCopyExpr(dst[src_i], src_value)
		}
	}
}

// deriveCompare_17 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_17(this, that *Keyword) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_18(this.Before, that.Before); c != 0 {
		return c
	}
	if c := strings.Compare(this.Value, that.Value); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_24 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_24(this, that *Expr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.RightArrow, that.RightArrow); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Comma, that.Comma); c != 0 {
		return c
	}
	if c := this.Terminal.Compare(that.Terminal); c != 0 {
		return c
	}
	if c := deriveCompare_25(this.List, that.List); c != 0 {
		return c
	}
	if c := deriveCompare_26(this.Function, that.Function); c != 0 {
		return c
	}
	if c := deriveCompare_27(this.BuiltIn, that.BuiltIn); c != 0 {
		return c
	}
	return 0
}

// deriveEqual_19 returns whether this and that are equal.
func deriveEqual_19(this, that *PatternDecl) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Hash, that.Hash) &&
			deriveEqual_(this.Before, that.Before) &&
			this.Name == that.Name &&
			deriveEqual_20(this.Eq, that.Eq) &&
			this.Pattern.Equal(that.Pattern)
}

// deriveEqual_20 returns whether this and that are equal.
func deriveEqual_20(this, that *Keyword) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_(this.Before, that.Before) &&
			this.Value == that.Value
}

// deriveEqual_21 returns whether this and that are equal.
func deriveEqual_21(this, that *Expr) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.RightArrow, that.RightArrow) &&
			deriveEqual_20(this.Comma, that.Comma) &&
			this.Terminal.Equal(that.Terminal) &&
			deriveEqual_22(this.List, that.List) &&
			deriveEqual_23(this.Function, that.Function) &&
			deriveEqual_24(this.BuiltIn, that.BuiltIn)
}

// deriveHash_13 returns the hash of the object.
func deriveHash_13(object *Keyword) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_16(object.Before)
	h = 31*h + deriveHash_s(object.Value)
	return h
}

// deriveHash_14 returns the hash of the object.
func deriveHash_14(object *NameExpr) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_17(object.Name)
	h = 31*h + deriveHash_18(object.AnyName)
	h = 31*h + deriveHash_19(object.AnyNameExcept)
	h = 31*h + deriveHash_20(object.NameChoice)
	return h
}

// deriveHash_15 returns the hash of the object.
func deriveHash_15(object *Expr) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.RightArrow)
	h = 31*h + deriveHash_13(object.Comma)
	h = 31*h + deriveHash_21(object.Terminal)
	h = 31*h + deriveHash_22(object.List)
	h = 31*h + deriveHash_23(object.Function)
	h = 31*h + deriveHash_24(object.BuiltIn)
	return h
}

// deriveHash_s returns the hash of the object.
func deriveHash_s(object string) uint64 {
	var h uint64
	for _, c := range object {
		h = 31*h + uint64(c)
	}
	return h
}

// deriveGoString_23 returns a recursive representation of this as a valid go string.
func deriveGoString_23(this *Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.Name{}\n")
		if this.Before != nil {
			fmt.Fprintf(buf, "this.Before = %s\n", deriveGoString_(this.Before))
		}
		if this.DoubleValue != nil {
			fmt.Fprintf(buf, "this.DoubleValue = func (v float64) *float64 { return &v }(%#v)\n", *this.DoubleValue)
		}
		if this.IntValue != nil {
			fmt.Fprintf(buf, "this.IntValue = func (v int64) *int64 { return &v }(%#v)\n", *this.IntValue)
		}
		if this.UintValue != nil {
			fmt.Fprintf(buf, "this.UintValue = func (v uint64) *uint64 { return &v }(%#v)\n", *this.UintValue)
		}
		if this.BoolValue != nil {
			fmt.Fprintf(buf, "this.BoolValue = func (v bool) *bool { return &v }(%#v)\n", *this.BoolValue)
		}
		if this.StringValue != nil {
			fmt.Fprintf(buf, "this.StringValue = func (v string) *string { return &v }(%#v)\n", *this.StringValue)
		}
		if this.BytesValue != nil {
			fmt.Fprintf(buf, "this.BytesValue = %#v\n", this.BytesValue)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_24 returns a recursive representation of this as a valid go string.
func deriveGoString_24(this *AnyName) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.AnyName {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.AnyName{}\n")
		if this.Underscore != nil {
			fmt.Fprintf(buf, "this.Underscore = %s\n", deriveGoString_14(this.Underscore))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_25 returns a recursive representation of this as a valid go string.
func deriveGoString_25(this *AnyNameExcept) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.AnyNameExcept {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.AnyNameExcept{}\n")
		if this.Exclamation != nil {
			fmt.Fprintf(buf, "this.Exclamation = %s\n", deriveGoString_14(this.Exclamation))
		}
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.Except != nil {
			fmt.Fprintf(buf, "this.Except = %s\n", deriveGoString_20(this.Except))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_26 returns a recursive representation of this as a valid go string.
func deriveGoString_26(this *NameChoice) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *ast.NameChoice {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &ast.NameChoice{}\n")
		if this.OpenParen != nil {
			fmt.Fprintf(buf, "this.OpenParen = %s\n", deriveGoString_14(this.OpenParen))
		}
		if this.Left != nil {
			fmt.Fprintf(buf, "this.Left = %s\n", deriveGoString_20(this.Left))
		}
		if this.Pipe != nil {
			fmt.Fprintf(buf, "this.Pipe = %s\n", deriveGoString_14(this.Pipe))
		}
		if this.Right != nil {
			fmt.Fprintf(buf, "this.Right = %s\n", deriveGoString_20(this.Right))
		}
		if this.CloseParen != nil {
			fmt.Fprintf(buf, "this.CloseParen = %s\n", deriveGoString_14(this.CloseParen))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveDeepCopy_22 recursively copies the contents of src into dst.
func deriveDeepCopy_22(dst, src *Name) {
	if src.Before == nil {
		dst.Before = nil
	} else {
		dst.Before = new(Space)
		deriveDeepCopy_(dst.Before, src.Before)
	}
	if src.DoubleValue == nil {
		dst.DoubleValue = nil
	} else {
		dst.DoubleValue = new(float64)
		*dst.DoubleValue = *src.DoubleValue
	}
	if src.IntValue == nil {
		dst.IntValue = nil
	} else {
		dst.IntValue = new(int64)
		*dst.IntValue = *src.IntValue
	}
	if src.UintValue == nil {
		dst.UintValue = nil
	} else {
		dst.UintValue = new(uint64)
		*dst.UintValue = *src.UintValue
	}
	if src.BoolValue == nil {
		dst.BoolValue = nil
	} else {
		dst.BoolValue = new(bool)
		*dst.BoolValue = *src.BoolValue
	}
	if src.StringValue == nil {
		dst.StringValue = nil
	} else {
		dst.StringValue = new(string)
		*dst.StringValue = *src.StringValue
	}
	if src.BytesValue == nil {
		dst.BytesValue = nil
	} else {
		if dst.BytesValue != nil {
			if len(src.BytesValue) > len(dst.BytesValue) {
				if cap(dst.BytesValue) >= len(src.BytesValue) {
					dst.BytesValue = (dst.BytesValue)[:len(src.BytesValue)]
				} else {
					dst.BytesValue = make([]byte, len(src.BytesValue))
				}
			} else if len(src.BytesValue) < len(dst.BytesValue) {
				dst.BytesValue = (dst.BytesValue)[:len(src.BytesValue)]
			}
		} else {
			dst.BytesValue = make([]byte, len(src.BytesValue))
		}
		copy(dst.BytesValue, src.BytesValue)
	}
}

// deriveDeepCopy_23 recursively copies the contents of src into dst.
func deriveDeepCopy_23(dst, src *AnyName) {
	if src.Underscore == nil {
		dst.Underscore = nil
	} else {
		dst.Underscore = new(Keyword)
		deriveDeepCopy_14(dst.Underscore, src.Underscore)
	}
}

// deriveDeepCopy_24 recursively copies the contents of src into dst.
func deriveDeepCopy_24(dst, src *AnyNameExcept) {
	if src.Exclamation == nil {
		dst.Exclamation = nil
	} else {
		dst.Exclamation = new(Keyword)
		deriveDeepCopy_14(dst.Exclamation, src.Exclamation)
	}
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.Except == nil {
		dst.Except = nil
	} else {
		dst.Except = new(NameExpr)
		deriveDeepCopy_20(dst.Except, src.Except)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
}

// deriveDeepCopy_25 recursively copies the contents of src into dst.
func deriveDeepCopy_25(dst, src *NameChoice) {
	if src.OpenParen == nil {
		dst.OpenParen = nil
	} else {
		dst.OpenParen = new(Keyword)
		deriveDeepCopy_14(dst.OpenParen, src.OpenParen)
	}
	if src.Left == nil {
		dst.Left = nil
	} else {
		dst.Left = new(NameExpr)
		deriveDeepCopy_20(dst.Left, src.Left)
	}
	if src.Pipe == nil {
		dst.Pipe = nil
	} else {
		dst.Pipe = new(Keyword)
		deriveDeepCopy_14(dst.Pipe, src.Pipe)
	}
	if src.Right == nil {
		dst.Right = nil
	} else {
		dst.Right = new(NameExpr)
		deriveDeepCopy_20(dst.Right, src.Right)
	}
	if src.CloseParen == nil {
		dst.CloseParen = nil
	} else {
		dst.CloseParen = new(Keyword)
		deriveDeepCopy_14(dst.CloseParen, src.CloseParen)
	}
}

// deriveCompare_25 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_25(this, that *List) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_18(this.Before, that.Before); c != 0 {
		return c
	}
	if c := deriveCompare_T(this.Type, that.Type); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.OpenCurly, that.OpenCurly); c != 0 {
		return c
	}
	if c := deriveCompare_28(this.Elems, that.Elems); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseCurly, that.CloseCurly); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_26 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_26(this, that *Function) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_18(this.Before, that.Before); c != 0 {
		return c
	}
	if c := strings.Compare(this.Name, that.Name); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.OpenParen, that.OpenParen); c != 0 {
		return c
	}
	if c := deriveCompare_28(this.Params, that.Params); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.CloseParen, that.CloseParen); c != 0 {
		return c
	}
	return 0
}

// deriveCompare_27 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_27(this, that *BuiltIn) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_17(this.Symbol, that.Symbol); c != 0 {
		return c
	}
	if c := deriveCompare_24(this.Expr, that.Expr); c != 0 {
		return c
	}
	return 0
}

// deriveEqual_22 returns whether this and that are equal.
func deriveEqual_22(this, that *List) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_(this.Before, that.Before) &&
			this.Type == that.Type &&
			deriveEqual_20(this.OpenCurly, that.OpenCurly) &&
			deriveEqual_25(this.Elems, that.Elems) &&
			deriveEqual_20(this.CloseCurly, that.CloseCurly)
}

// deriveEqual_23 returns whether this and that are equal.
func deriveEqual_23(this, that *Function) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_(this.Before, that.Before) &&
			this.Name == that.Name &&
			deriveEqual_20(this.OpenParen, that.OpenParen) &&
			deriveEqual_25(this.Params, that.Params) &&
			deriveEqual_20(this.CloseParen, that.CloseParen)
}

// deriveEqual_24 returns whether this and that are equal.
func deriveEqual_24(this, that *BuiltIn) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_20(this.Symbol, that.Symbol) &&
			deriveEqual_21(this.Expr, that.Expr)
}

// deriveHash_16 returns the hash of the object.
func deriveHash_16(object *Space) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_25(object.Space)
	return h
}

// deriveHash_17 returns the hash of the object.
func deriveHash_17(object *Name) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_16(object.Before)
	h = 31*h + deriveHash_26(object.DoubleValue)
	h = 31*h + deriveHash_27(object.IntValue)
	h = 31*h + deriveHash_28(object.UintValue)
	h = 31*h + deriveHash_29(object.BoolValue)
	h = 31*h + deriveHash_30(object.StringValue)
	h = 31*h + deriveHash_31(object.BytesValue)
	return h
}

// deriveHash_18 returns the hash of the object.
func deriveHash_18(object *AnyName) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Underscore)
	return h
}

// deriveHash_19 returns the hash of the object.
func deriveHash_19(object *AnyNameExcept) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Exclamation)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash_14(object.Except)
	h = 31*h + deriveHash_13(object.CloseParen)
	return h
}

// deriveHash_20 returns the hash of the object.
func deriveHash_20(object *NameChoice) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash_14(object.Left)
	h = 31*h + deriveHash_13(object.Pipe)
	h = 31*h + deriveHash_14(object.Right)
	h = 31*h + deriveHash_13(object.CloseParen)
	return h
}

// deriveHash_21 returns the hash of the object.
func deriveHash_21(object *Terminal) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_16(object.Before)
	h = 31*h + deriveHash_s(object.Literal)
	h = 31*h + deriveHash_26(object.DoubleValue)
	h = 31*h + deriveHash_27(object.IntValue)
	h = 31*h + deriveHash_28(object.UintValue)
	h = 31*h + deriveHash_29(object.BoolValue)
	h = 31*h + deriveHash_30(object.StringValue)
	h = 31*h + deriveHash_31(object.BytesValue)
	h = 31*h + deriveHash_32(object.Variable)
	return h
}

// deriveHash_22 returns the hash of the object.
func deriveHash_22(object *List) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_16(object.Before)
	h = 31*h + uint64(object.Type)
	h = 31*h + deriveHash_13(object.OpenCurly)
	h = 31*h + deriveHash_33(object.Elems)
	h = 31*h + deriveHash_13(object.CloseCurly)
	return h
}

// deriveHash_23 returns the hash of the object.
func deriveHash_23(object *Function) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_16(object.Before)
	h = 31*h + deriveHash_s(object.Name)
	h = 31*h + deriveHash_13(object.OpenParen)
	h = 31*h + deriveHash_33(object.Params)
	h = 31*h + deriveHash_13(object.CloseParen)
	return h
}

// deriveHash_24 returns the hash of the object.
func deriveHash_24(object *BuiltIn) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + deriveHash_13(object.Symbol)
	h = 31*h + deriveHash_15(object.Expr)
	return h
}

// deriveCompare_28 returns:
//   * 0 if this and that are equal,
//   * -1 is this is smaller and
//   * +1 is this is bigger.
func deriveCompare_28(this, that []*Expr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_24(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

// deriveEqual_25 returns whether this and that are equal.
func deriveEqual_25(this, that []*Expr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_21(this[i], that[i])) {
			return false
		}
	}
	return true
}

// deriveHash_25 returns the hash of the object.
func deriveHash_25(object []string) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	for i := 0; i < len(object); i++ {
		h = 31*h + deriveHash_s(object[i])
	}
	return h
}

// deriveHash_26 returns the hash of the object.
func deriveHash_26(object *float64) uint64 {
	if object == nil {
		return 0
	}
	return (31 * 17) + math.Float64bits(*object)
}

// deriveHash_27 returns the hash of the object.
func deriveHash_27(object *int64) uint64 {
	if object == nil {
		return 0
	}
	return (31 * 17) + uint64(*object)
}

// deriveHash_28 returns the hash of the object.
func deriveHash_28(object *uint64) uint64 {
	if object == nil {
		return 0
	}
	return (31 * 17) + *object
}

// deriveHash_29 returns the hash of the object.
func deriveHash_29(object *bool) uint64 {
	if object == nil {
		return 0
	}
	return (31 * 17) + deriveHash_b(*object)
}

// deriveHash_30 returns the hash of the object.
func deriveHash_30(object *string) uint64 {
	if object == nil {
		return 0
	}
	return (31 * 17) + deriveHash_s(*object)
}

// deriveHash_31 returns the hash of the object.
func deriveHash_31(object []byte) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	for i := 0; i < len(object); i++ {
		h = 31*h + uint64(object[i])
	}
	return h
}

// deriveHash_32 returns the hash of the object.
func deriveHash_32(object *Variable) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	h = 31*h + uint64(object.Type)
	return h
}

// deriveHash_33 returns the hash of the object.
func deriveHash_33(object []*Expr) uint64 {
	if object == nil {
		return 0
	}
	h := uint64(17)
	for i := 0; i < len(object); i++ {
		h = 31*h + deriveHash_15(object[i])
	}
	return h
}

// deriveHash_b returns the hash of the object.
func deriveHash_b(object bool) uint64 {
	if object {
		return 1
	}
	return 0
}
